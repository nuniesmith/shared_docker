# Docker Template - Enhanced React/Node.js Service  
# Template for FKS React frontends with nginx serving

# Build stage
FROM node:22-alpine AS build

# Build arguments for customization
ARG SERVICE_NAME=fks-web
ARG SERVICE_TYPE=frontend
ARG SERVICE_PORT=80
ARG NODE_ENV=production
ARG API_BASE_URL=http://localhost:8000

# Environment variables for build stage
ENV NODE_ENV=${NODE_ENV} \
    NPM_CONFIG_CACHE=/tmp/.npm \
    YARN_CACHE_FOLDER=/tmp/.yarn \
    CI=true

WORKDIR /app

# Install dependencies first for better caching
COPY package*.json yarn.lock* ./
RUN --mount=type=cache,target=/tmp/.npm \
    --mount=type=cache,target=/tmp/.yarn \
    if [ -f "yarn.lock" ]; then yarn install --frozen-lockfile --production=false; \
    else npm ci --include=dev; fi

# Copy source code
COPY src/ ./src/
COPY public/ ./public/
COPY shared/ ./shared/
COPY *.json *.js *.ts *.config.* ./

# Build the application
RUN --mount=type=cache,target=/tmp/.npm \
    --mount=type=cache,target=/tmp/.yarn \
    if [ -f "yarn.lock" ]; then yarn build; \
    else npm run build; fi

# Runtime stage - nginx serving
FROM nginx:1.27.1-alpine AS runtime

# Runtime arguments
ARG SERVICE_NAME=fks-web
ARG SERVICE_TYPE=frontend
ARG SERVICE_PORT=80
ARG USER_ID=1088

# FKS standard environment variables
ENV FKS_SERVICE_NAME=${SERVICE_NAME} \
    FKS_SERVICE_TYPE=${SERVICE_TYPE} \
    FKS_SERVICE_PORT=${SERVICE_PORT} \
    FKS_ENVIRONMENT=production \
    FKS_LOG_LEVEL=info \
    FKS_HEALTH_CHECK_PATH=/health \
    FKS_METRICS_PATH=/metrics \
    FKS_CONFIG_PATH=/app/config \
    FKS_STATIC_PATH=/usr/share/nginx/html

# Install curl for health checks
RUN apk add --no-cache curl

# Copy built application from build stage
COPY --from=build /app/build/ /usr/share/nginx/html/
COPY --from=build /app/shared/config/ /app/config/ 2>/dev/null || true

# Copy nginx configuration template
COPY <<EOF /etc/nginx/templates/default.conf.template
server {
    listen ${SERVICE_PORT};
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # FKS standard headers
    add_header X-Service-Name "${FKS_SERVICE_NAME}";
    add_header X-Service-Type "${FKS_SERVICE_TYPE}";
    
    # Security headers
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy strict-origin-when-cross-origin;

    # Health check endpoint
    location ${FKS_HEALTH_CHECK_PATH} {
        access_log off;
        return 200 '{"status":"healthy","service":"${FKS_SERVICE_NAME}","type":"${FKS_SERVICE_TYPE}"}';
        add_header Content-Type application/json;
    }

    # Metrics endpoint
    location ${FKS_METRICS_PATH} {
        access_log off;
        stub_status on;
    }

    # Static assets with caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Main application
    location / {
        try_files $uri $uri/ /index.html;
    }

    # API proxy (if needed)
    location /api/ {
        proxy_pass http://fks-api:8000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
EOF

# Create non-root user and adjust permissions
RUN addgroup -g ${USER_ID} appuser && \
    adduser -D -u ${USER_ID} -G appuser appuser && \
    chown -R appuser:appuser /usr/share/nginx/html /var/cache/nginx /var/run /var/log/nginx

# Health check configuration
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${SERVICE_PORT}${FKS_HEALTH_CHECK_PATH} || exit 1

# Switch to non-root user
USER appuser

# Expose service port
EXPOSE ${SERVICE_PORT}

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
