version: '3.8'

# Docker Compose template for FKS services using improved templates
# This demonstrates how to use the improved Dockerfile templates in a multi-service setup

services:
  # Base shared services
  nginx-proxy:
    build:
      context: .
      dockerfile: shared/shared_docker/templates/Dockerfile.nginx
      args:
        NGINX_VERSION: 1.27.1
        SERVICE_PORT: 80
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./shared/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./shared/nginx/ssl:/etc/nginx/ssl:ro
    environment:
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
    depends_on:
      - fks-api
      - fks-web
    networks:
      - fks-network
    restart: unless-stopped

  # Python-based API service
  fks-api:
    build:
      context: ./fks_api
      dockerfile: ../shared/shared_docker/templates/Dockerfile.python
      args:
        PYTHON_VERSION: 3.13
        BUILD_TYPE: cpu
        SERVICE_PORT: 8000
    ports:
      - "8000:8000"
    environment:
      - SERVICE_NAME=fks-api
      - DATABASE_URL=postgresql://fks:${DB_PASSWORD}@postgres:5432/fks
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=info
    volumes:
      - ./fks_api/src:/app/src:ro
      - fks-api-logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - fks-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Rust-based engine service  
  fks-engine:
    build:
      context: ./fks_engine
      dockerfile: ../shared/shared_docker/templates/Dockerfile.rust
      args:
        RUST_VERSION: 1.81
        SERVICE_PORT: 8080
        APP_NAME: fks-engine
    ports:
      - "8080:8080"
    environment:
      - RUST_LOG=info
      - SERVICE_NAME=fks-engine
      - DATABASE_URL=postgresql://fks:${DB_PASSWORD}@postgres:5432/fks
    volumes:
      - fks-engine-data:/app/data
      - fks-engine-logs:/app/logs
    depends_on:
      - postgres
    networks:
      - fks-network
    restart: unless-stopped

  # .NET NinjaTrader integration
  fks-ninja:
    build:
      context: ./fks_ninja
      dockerfile: ../shared/shared_docker/templates/Dockerfile.dotnet
      args:
        DOTNET_VERSION: 9.0
        SERVICE_PORT: 8090
        PROJECT_NAME: FKS.NinjaTrader
    ports:
      - "8090:8090"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - SERVICE_NAME=fks-ninja
      - ConnectionStrings__DefaultConnection=Server=postgres;Database=fks;User Id=fks;Password=${DB_PASSWORD}
    volumes:
      - fks-ninja-data:/app/data
      - fks-ninja-logs:/app/logs
    depends_on:
      - postgres
    networks:
      - fks-network
    restart: unless-stopped

  # React web frontend
  fks-web:
    build:
      context: ./fks_web
      dockerfile: ../shared/shared_docker/templates/Dockerfile.node
      args:
        NODE_VERSION: 22
        SERVICE_PORT: 3000
        APP_ENV: production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - API_URL=http://fks-api:8000
      - SERVICE_NAME=fks-web
    volumes:
      - fks-web-logs:/var/log/nginx
    depends_on:
      - fks-api
    networks:
      - fks-network
    restart: unless-stopped

  # Supporting services
  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=fks
      - POSTGRES_USER=fks
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./shared/postgres/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - fks-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - fks-network
    restart: unless-stopped

networks:
  fks-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  fks-api-logs:
  fks-engine-data:
  fks-engine-logs:
  fks-ninja-data:
  fks-ninja-logs:
  fks-web-logs:
