# Docker Template - Enhanced Rust Service
# Template for FKS Rust microservices with standardized configuration

# Build stage
FROM rust:1.82-slim AS build

# Build arguments for customization
ARG SERVICE_NAME=fks-service
ARG SERVICE_TYPE=engine  
ARG SERVICE_PORT=8080

# Environment variables for build stage
ENV CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse \
    CARGO_NET_GIT_FETCH_WITH_CLI=true \
    DEBIAN_FRONTEND=noninteractive

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    pkg-config \
    libssl-dev \
    ca-certificates \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy Cargo files for dependency caching
COPY Cargo.toml ./
COPY Cargo.lock ./
RUN mkdir -p src && echo "fn main() {}" > src/main.rs

# Build dependencies separately for better caching
RUN --mount=type=cache,target=/usr/local/cargo/registry \
    --mount=type=cache,target=/app/target \
    cargo fetch

# Copy source code and build
COPY src/ ./src/

RUN --mount=type=cache,target=/usr/local/cargo/registry \
    --mount=type=cache,target=/app/target \
    cargo build --release && \
    find target/release -maxdepth 1 -type f -executable -not -name "*.*" -exec cp {} /app/service \;

# Runtime stage - using Debian slim for compatibility
FROM debian:bookworm-slim AS runtime

# Runtime arguments
ARG SERVICE_NAME=fks-service
ARG SERVICE_TYPE=engine
ARG SERVICE_PORT=8080

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    netcat-traditional \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy the binary from build stage
COPY --from=build /app/service /app/service

# Create non-root user (FKS standard UID 1088)
RUN adduser --disabled-password --gecos '' --uid 1088 appuser && \
    chown -R appuser:appuser /app

# FKS standard environment variables
ENV FKS_SERVICE_NAME=${SERVICE_NAME} \
    FKS_SERVICE_TYPE=${SERVICE_TYPE} \
    FKS_SERVICE_PORT=${SERVICE_PORT} \
    FKS_ENVIRONMENT=production \
    FKS_LOG_LEVEL=INFO \
    FKS_HEALTH_CHECK_PATH=/health \
    FKS_METRICS_PATH=/metrics \
    FKS_CONFIG_PATH=/app/config \
    FKS_DATA_PATH=/app/data

# Expose service port
EXPOSE ${SERVICE_PORT}

# Use non-root user
USER appuser

# Default entrypoint
ENTRYPOINT ["/app/service"]
