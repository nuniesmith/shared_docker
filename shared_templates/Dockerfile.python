# Docker Template - Enhanced Python Service
# Template for FKS Python microservices with standardized configuration

# Build stage
FROM python:3.13-slim AS build

# Build arguments for customization
ARG SERVICE_NAME=fks-service
ARG SERVICE_TYPE=api
ARG SERVICE_PORT=8000
ARG PYTHON_VERSION=3.13
ARG BUILD_ENV=production

# Environment variables for build stage
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive

WORKDIR /app

# Install system dependencies for building
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    curl \
    git \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /venv
ENV PATH="/venv/bin:$PATH"

# Copy dependency files for layer caching
COPY requirements*.txt pyproject.toml* ./

# Install Python dependencies
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --upgrade pip wheel setuptools && \
    if [ -f "requirements.txt" ]; then pip install -r requirements.txt; fi && \
    if [ -f "requirements.dev.txt" ]; then pip install -r requirements.dev.txt; fi && \
    if [ -f "pyproject.toml" ]; then pip install -e .; fi

# Copy source code
COPY src/ ./src/
COPY shared/ ./shared/

# Runtime stage
FROM python:3.13-slim AS runtime

# Runtime arguments
ARG SERVICE_NAME=fks-service
ARG SERVICE_TYPE=api
ARG SERVICE_PORT=8000
ARG USER_ID=1088

# FKS standard environment variables
ENV FKS_SERVICE_NAME=${SERVICE_NAME} \
    FKS_SERVICE_TYPE=${SERVICE_TYPE} \
    FKS_SERVICE_PORT=${SERVICE_PORT} \
    FKS_ENVIRONMENT=production \
    FKS_LOG_LEVEL=INFO \
    FKS_HEALTH_CHECK_PATH=/health \
    FKS_METRICS_PATH=/metrics \
    FKS_CONFIG_PATH=/app/config \
    FKS_DATA_PATH=/app/data

# Python runtime configuration
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH="/venv/bin:$PATH" \
    PYTHONPATH="/app/src:/app/shared"

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    curl \
    ca-certificates \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy virtual environment from build stage
COPY --from=build /venv /venv

# Copy application code from build stage
COPY --from=build /app/src ./src/
COPY --from=build /app/shared ./shared/

# Create application directories
RUN mkdir -p /app/config /app/data /app/logs && \
    chmod -R 755 /app

# Create non-root user
RUN groupadd --gid ${USER_ID} appuser && \
    useradd --uid ${USER_ID} --gid appuser --create-home --shell /bin/bash appuser && \
    chown -R appuser:appuser /app

# Health check configuration
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${SERVICE_PORT}${FKS_HEALTH_CHECK_PATH} || exit 1

# Switch to non-root user
USER appuser

# Expose service port
EXPOSE ${SERVICE_PORT}

# Default entrypoint - override in service-specific Dockerfiles
CMD ["python", "-m", "uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "${FKS_SERVICE_PORT}"]
